/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function (graph, initial) {
  const n = graph.length;
  const initialSet = new Set(initial);
  const visited = new Array(n).fill(0);

  initial.sort((a, b) => a - b);
  let targetNode = initial[0];
  let reduceCount = 0;

  for (const badNode of initial) {
    if (visited[badNode]) continue;

    visited[badNode] = 1;

    const queue = [badNode];

    let nodeCount = 0;
    let badCount = 0;

    while (queue.length) {
      const node = queue.shift();
      nodeCount += 1;
      if (initialSet.has(node)) badCount += 1;

      for (let i = 0; i < n; i++) {
        if (graph[node][i] === 1 && !visited[i]) {
          queue.push(i);
          visited[i] = 1;
        }
      }
    }

    if (badCount === 1 && nodeCount > reduceCount) {
      reduceCount = nodeCount;
      targetNode = badNode;
    }
  }

  return targetNode;
};
